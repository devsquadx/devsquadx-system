// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
enum TokenType {
  RESET_PASSWORD
}

model Customer {
  id          Int       @id @default(autoincrement())
  name        String
  email       String
  phoneNumber String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

model Project {
  id         Int      @id @default(autoincrement())
  name       String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
}

model IncomeType {
  id      Int      @id @default(autoincrement())
  type    String   @db.VarChar(255)
  incomes Income[]
}

model Income {
  id           Int        @id @default(autoincrement())
  description  String
  amount       Decimal    @default(0) @db.Decimal(18, 2)
  incomeType   IncomeType @relation(fields: [incomeTypeId], references: [id])
  incomeTypeId Int
}

model ExpenseType {
  id       Int       @id @default(autoincrement())
  type     String    @db.VarChar(255)
  expenses Expense[]
}

model Expense {
  id            Int         @id @default(autoincrement())
  description   String
  amount        Decimal     @default(0) @db.Decimal(18, 2)
  expenseType   ExpenseType @relation(fields: [expenseTypeId], references: [id])
  expenseTypeId Int
}
